warning: variable `last_connection_attempt` is assigned to, but never used
   --> src\ipc_client.rs:299:21
    |
299 |             let mut last_connection_attempt = std::time::Instant::now();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: consider using `_last_connection_attempt` instead
    = note: `#[warn(unused_variables)]` on by default

warning: value assigned to `connection_retry_count` is never read
   --> src\ipc_client.rs:313:25
    |
313 |                         connection_retry_count = 0; // Reset retry count on successful connection
    |                         ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `last_connection_attempt` is never read
   --> src\ipc_client.rs:356:25
    |
356 |                         last_connection_attempt = std::time::Instant::now();
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `current_len`
   --> src\ipc_client.rs:856:17
    |
856 |             let current_len = monitors_lock.len();
    |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_len`

warning: unused variable: `count`
   --> src\ipc_server.rs:384:24
    |
384 |                     Ok(count) => Ok(ipc::GridResponse::Success),
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`

warning: variable does not need to be mutable
   --> src\ipc_server.rs:852:19
    |
852 |         if let Ok(mut tracker) = self.tracker.lock() {
    |                   ----^^^^^^^
    |                   |
    |                   help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
    --> src\ipc_server.rs:1164:35
     |
1164 |                         if let Ok(mut tracker) = self.tracker.lock() {
     |                                   ----^^^^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: unused variable: `counter`
    --> src\lib.rs:1376:9
     |
1376 |     let counter = tracker.enum_counter.fetch_add(1, Ordering::SeqCst) + 1;
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_counter`

warning: methods `trigger_window_activated`, `trigger_window_minimized`, and `trigger_window_restored` are never used
   --> src\lib.rs:473:8
    |
399 | impl WindowTracker {
    | ------------------ methods in this implementation
...
473 |     fn trigger_window_activated(&self, hwnd: HWND, window_info: &WindowInfo) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
479 |     fn trigger_window_minimized(&self, hwnd: HWND) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
485 |     fn trigger_window_restored(&self, hwnd: HWND, window_info: &WindowInfo) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: associated items `process_responses` and `get_window_title` are never used
    --> src\ipc_client.rs:164:8
     |
102  | impl GridClient {
     | --------------- associated items in this implementation
...
164  |     fn process_responses(&mut self) -> Result<(), Box<dyn std::error::Error>> {
     |        ^^^^^^^^^^^^^^^^^
...
1098 |     fn get_window_title(hwnd: winapi::shared::windef::HWND) -> String {
     |        ^^^^^^^^^^^^^^^^

warning: method `create_window_details_safe` is never used
   --> src\ipc_server.rs:650:8
    |
54  | impl GridIpcServer {
    | ------------------ method in this implementation
...
650 |     fn create_window_details_safe(&self, hwnd: HWND, window_info: &crate::WindowInfo) -> ipc::WindowDetails {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:133:24
    |
133 |     let config = match WINDOW_EVENT_CONFIG.as_ref() {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: creating a mutable reference to mutable static is discouraged
   --> src\window_events.rs:242:17
    |
242 |                 EVENT_HOOKS.push(hook);
    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:247:25
    |
247 |         let hooks_len = EVENT_HOOKS.len();
    |                         ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:253:26
    |
253 |         let config_ref = WINDOW_EVENT_CONFIG.as_ref().unwrap();
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:275:21
    |
275 |         for hook in &EVENT_HOOKS {
    |                     ^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
help: use `&raw const` instead to create a raw pointer
    |
275 |         for hook in &raw const EVENT_HOOKS {
    |                      +++++++++

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:464:20
    |
464 |                 if LAST_STATUS_TIME.elapsed().as_secs() > 30 && !had_activity { // Only during idle periods
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:658:16
    |
658 |                LAST_EVENT_DISPLAY.elapsed().as_millis() > 500 { // Max twice per second
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:740:20
    |
740 |                 if LAST_AUTO_DISPLAY.elapsed().as_millis() > 1000 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:747:25
    |
747 |                         LAST_AUTO_DISPLAY.elapsed().as_millis());
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_server.rs:264:76
    |
264 |                 println!("üîç [DEBUG] process_focus_events called {} times", CALL_COUNT);
    |                                                                             ^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: `e_grid` (lib) generated 21 warnings (run `cargo fix --lib -p e_grid` to apply 2 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.08s
     Running `target\debug\examples\focus_demo_server.exe`
üéØ e_grid Focus Demo Server
===========================
This server provides focus events for the focus tracking examples.
Run this first, then run any of the focus tracking examples.

üöÄ Starting Focus Demo Server...
        0 [W] "Config::global_config()" 
| No config file was loaded, a config with default values will be used. 
üì° Setting up window events IPC service...
Path: c:\Temp\iceoryx2\nodes\8151601456295219477535058060
Error: AlreadyExists
error: process didn't exit successfully: `target\debug\examples\focus_demo_server.exe` (exit code: 1)
