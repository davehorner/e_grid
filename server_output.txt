warning: unused imports: `debug`, `info`, and `warn`
  --> src\window_events.rs:12:11
   |
12 | use log::{info, debug, warn};
   |           ^^^^  ^^^^^  ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
  --> src\ipc.rs:10:30
   |
10 | use log::{info, debug, warn, error};
   |                              ^^^^^

warning: value assigned to `connection_retry_count` is never read
   --> src\ipc_client.rs:218:25
    |
218 |                         connection_retry_count = 0; // Reset retry count on successful connection
    |                         ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `count`
   --> src\ipc_server.rs:384:24
    |
384 |                     Ok(count) => Ok(ipc::GridResponse::Success),
    |                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_count`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src\ipc_server.rs:882:19
    |
882 |         if let Ok(mut tracker) = self.tracker.lock() {
    |                   ----^^^^^^^
    |                   |
    |                   help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
    --> src\ipc_server.rs:1302:35
     |
1302 |                         if let Ok(mut tracker) = self.tracker.lock() {
     |                                   ----^^^^^^^
     |                                   |
     |                                   help: remove this `mut`

warning: unused variable: `counter`
    --> src\lib.rs:1376:9
     |
1376 |     let counter = tracker.enum_counter.fetch_add(1, Ordering::SeqCst) + 1;
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_counter`

warning: methods `trigger_window_activated`, `trigger_window_minimized`, and `trigger_window_restored` are never used
   --> src\lib.rs:473:8
    |
399 | impl WindowTracker {
    | ------------------ methods in this implementation
...
473 |     fn trigger_window_activated(&self, hwnd: HWND, window_info: &WindowInfo) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
479 |     fn trigger_window_minimized(&self, hwnd: HWND) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
485 |     fn trigger_window_restored(&self, hwnd: HWND, window_info: &WindowInfo) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `create_window_details_safe` is never used
   --> src\ipc_server.rs:650:8
    |
54  | impl GridIpcServer {
    | ------------------ method in this implementation
...
650 |     fn create_window_details_safe(&self, hwnd: HWND, window_info: &crate::WindowInfo) -> ipc::WindowDetails {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:134:24
    |
134 |     let config = match WINDOW_EVENT_CONFIG.as_ref() {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: creating a mutable reference to mutable static is discouraged
   --> src\window_events.rs:243:17
    |
243 |                 EVENT_HOOKS.push(hook);
    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:248:25
    |
248 |         let hooks_len = EVENT_HOOKS.len();
    |                         ^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:254:26
    |
254 |         let config_ref = WINDOW_EVENT_CONFIG.as_ref().unwrap();
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\window_events.rs:276:21
    |
276 |         for hook in &EVENT_HOOKS {
    |                     ^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
help: use `&raw const` instead to create a raw pointer
    |
276 |         for hook in &raw const EVENT_HOOKS {
    |                      +++++++++

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:365:20
    |
365 |                 if LAST_STATUS_TIME.elapsed().as_secs() > 30 && !had_activity { // Only during idle periods
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:557:16
    |
557 |                LAST_EVENT_DISPLAY.elapsed().as_millis() > 500 { // Max twice per second
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:637:20
    |
637 |                 if LAST_AUTO_DISPLAY.elapsed().as_millis() > 1000 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_client.rs:644:25
    |
644 |                         LAST_AUTO_DISPLAY.elapsed().as_millis());
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: creating a shared reference to mutable static is discouraged
   --> src\ipc_server.rs:264:76
    |
264 |                 println!("üîç [DEBUG] process_focus_events called {} times", CALL_COUNT);
    |                                                                             ^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives

warning: `e_grid` (lib) generated 19 warnings (run `cargo fix --lib -p e_grid` to apply 4 suggestions)
   Compiling e_grid v0.1.0 (C:\w\e_grid)
warning: creating a shared reference to mutable static is discouraged
   --> src\e_grid.rs:231:16
    |
231 |             if LAST_STATUS_DISPLAY.elapsed().as_secs() > 30 {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: `e_grid` (bin "e_grid") generated 1 warning
error: failed to remove file `C:\w\e_grid\target\debug\e_grid.exe`

Caused by:
  Access is denied. (os error 5)
